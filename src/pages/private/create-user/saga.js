// outsource dependenciesimport { takeEvery, put, delay, call } from 'redux-saga/effects';// local dependenciesimport { TYPE } from './reducer';import { users } from '../../../routes';import { push } from 'connected-react-router'import ApiService from '../../../services/api-service';function * initializeSaga({ payload: { userId } }) {    try {        if (userId !== 'new') {            const { data } = yield call(ApiService.getUserById, userId);            yield put({                type: TYPE.META,                payload: { user: { ...data, suffix: { label: data.suffix, value: data.suffix } } }            });        }    } catch({ message }) {        yield put({ type: TYPE.META, payload: { errorMessage: message } });    }    yield delay(1000);    yield put({ type: TYPE.META, payload: { initialized: true }});}function * createUserSaga({ payload }) {    yield put({ type: TYPE.META, payload: { disabled: true } });    try {        if (payload.id) {            yield call(ApiService.editUser, payload);        } else {            yield call(ApiService.createUser, payload);        }        yield delay(1000);        yield put(push(users.path));    } catch({ message }) {        yield put({ type: TYPE.META, payload: { errorMessage: message } });    }    yield put({ type: TYPE.META, payload: { disabled: false } });}export default function * () {    yield takeEvery(TYPE.INITIALIZE, initializeSaga);    yield takeEvery(TYPE.CREATE_USER, createUserSaga);}